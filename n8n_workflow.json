{
  "name": "Social Media Automation ohne API-Keys",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "login",
        "options": {}
      },
      "id": "login-node",
      "name": "Social Media Login",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [240, 300],
      "webhookId": "social-media-login"
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "posts",
        "options": {}
      },
      "id": "get-posts-node",
      "name": "Get Posts/Videos",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300],
      "webhookId": "get-posts"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "login-success",
              "leftValue": "={{ $json.status }}",
              "rightValue": "success",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if-login-success",
      "name": "Login erfolgreich?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Konfiguration für verschiedene Plattformen\nconst config = {\n  instagram: {\n    username: 'ihr_instagram_username',\n    password: 'ihr_instagram_password',\n    target_user: 'target_instagram_user'\n  },\n  tiktok: {\n    username: 'ihr_tiktok_username', \n    password: 'ihr_tiktok_password',\n    target_user: 'target_tiktok_user'\n  }\n};\n\n// Plattform aus Trigger wählen\nconst platform = $input.first().json.platform || 'instagram';\nconst platformConfig = config[platform];\n\n// Login Request vorbereiten\nreturn {\n  json: {\n    url: 'http://localhost:5000/login',\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: {\n      platform: platform,\n      username: platformConfig.username,\n      password: platformConfig.password\n    }\n  }\n};"
      },
      "id": "prepare-login",
      "name": "Login vorbereiten",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [120, 300]
    },
    {
      "parameters": {
        "jsCode": "// Posts Request vorbereiten\nconst platform = $('prepare-login').first().json.body.platform;\nconst targetUser = $('prepare-login').first().json.body.platform === 'instagram' ? \n  'target_instagram_user' : 'target_tiktok_user';\n\nreturn {\n  json: {\n    url: 'http://localhost:5000/posts',\n    method: 'GET',\n    qs: {\n      platform: platform,\n      username: targetUser,\n      count: 10\n    }\n  }\n};"
      },
      "id": "prepare-posts",
      "name": "Posts Request vorbereiten",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "// Daten verarbeiten und formatieren\nconst posts = $input.first().json.data;\nconst platform = $('prepare-login').first().json.body.platform;\n\nconst formattedPosts = posts.map((post, index) => ({\n  platform: platform,\n  post_number: post.post_number || post.video_number,\n  media_url: post.image_url || post.video_url,\n  description: post.alt_text || '',\n  timestamp: new Date().toISOString(),\n  processed: true\n}));\n\nreturn {\n  json: {\n    platform: platform,\n    total_posts: formattedPosts.length,\n    posts: formattedPosts,\n    success: true\n  }\n};"
      },
      "id": "process-posts",
      "name": "Posts verarbeiten",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// Fehlerbehandlung\nconst error = $input.first().json;\n\nreturn {\n  json: {\n    error: true,\n    message: error.message || 'Unbekannter Fehler',\n    timestamp: new Date().toISOString(),\n    platform: $('prepare-login').first().json.body.platform\n  }\n};"
      },
      "id": "handle-error",
      "name": "Fehler behandeln",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 500]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "logout",
        "options": {}
      },
      "id": "logout-node",
      "name": "Logout",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1340, 300],
      "webhookId": "logout"
    }
  ],
  "connections": {
    "prepare-login": {
      "main": [
        [
          {
            "node": "login-node",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "login-node": {
      "main": [
        [
          {
            "node": "if-login-success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if-login-success": {
      "main": [
        [
          {
            "node": "prepare-posts",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "handle-error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare-posts": {
      "main": [
        [
          {
            "node": "get-posts-node",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-posts-node": {
      "main": [
        [
          {
            "node": "process-posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-posts": {
      "main": [
        [
          {
            "node": "logout-node",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}